@page "/departments"
@using NewAttendanceProject.Models
@using NewAttendanceProject.Services
@inject DepartmentService DepartmentService
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Departments</PageTitle>

<h1>Departments</h1>

<div class="row mb-3">
    <div class="col">
        <button class="btn btn-primary" @onclick="() => ShowAddModal()">
            <i class="oi oi-plus"></i> Add Department
        </button>
    </div>
</div>

@if (departments == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var department in departments)
                {
                    <tr>
                        <td>@department.Id</td>
                        <td>@department.Name</td>
                        <td>
                            <button class="btn btn-sm btn-primary" @onclick="() => ShowEditModal(department)">
                                <i class="oi oi-pencil"></i> Edit
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteModal(department)">
                                <i class="oi oi-trash"></i> Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (showModal)
{
    <div class="modal fade show" style="display:block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentDepartment" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="name" class="form-label">Name</label>
                            <InputText id="name" @bind-Value="currentDepartment.Name" class="form-control" />
                            <ValidationMessage For="@(() => currentDepartment.Name)" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showDeleteModal)
{
    <div class="modal fade show" style="display:block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the department: <strong>@currentDepartment.Name</strong>?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteDepartment">Delete</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<Department> departments;
    private Department currentDepartment = new Department();
    private bool showModal = false;
    private bool showDeleteModal = false;
    private string modalTitle = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadDepartments();
    }

    private async Task LoadDepartments()
    {
        departments = await DepartmentService.GetAllAsync();
    }

    private void ShowAddModal()
    {
        currentDepartment = new Department();
        modalTitle = "Add Department";
        showModal = true;
    }

    private void ShowEditModal(Department department)
    {
        currentDepartment = new Department
        {
            Id = department.Id,
            Name = department.Name
        };
        modalTitle = "Edit Department";
        showModal = true;
    }

    private void ShowDeleteModal(Department department)
    {
        currentDepartment = department;
        showDeleteModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
    }

    private async Task HandleValidSubmit()
    {
        if (currentDepartment.Id == 0)
        {
            await DepartmentService.CreateAsync(currentDepartment);
        }
        else
        {
            await DepartmentService.UpdateAsync(currentDepartment);
        }

        await LoadDepartments();
        showModal = false;
    }

    private async Task DeleteDepartment()
    {
        await DepartmentService.DeleteAsync(currentDepartment.Id);
        await LoadDepartments();
        showDeleteModal = false;
    }
} 